from Compiler.types import sint, regint, Array, MemValue
from Compiler.library import print_ln, do_while, for_range
from Compiler.util import if_else

PORTNUM = 14000         # The Port number for Computation_Node_0 (with the others following as 14000+i in sequence)
MAX_NUM_CLIENTS = 8     # The maximum number of data providers (adjustable)
n_rounds = 1            # The number of rounds for the average salary survey

if len(program.args) > 1:
    n_rounds = int(program.args[1])

if len(program.args) > 2:
    program.active = bool(int(program.args[2]))

def accept_client():
    client_socket_id = accept_client_connection(PORTNUM)
    return client_socket_id

def close_connections(client_id):
    closeclientconnection(client_id)

def client_input(t, client_socket_id):
    """
    Send share of random value, receive input and deduce share.
    """
    
    return t.receive_from_client(1, client_socket_id)[0]


def average_gender_salary(number_clients, client_values, client_genders):
    sum = Array(3, client_values.value_type)        # The total sum of salaries provided by each gender.
    sum.assign_all(0)

    num_of_gender = sint.Array(3)                   # The number of individuals of each gender participating in the survey.
    num_of_gender.assign_all(0)
    
    @for_range(number_clients)
    def loop_body(i):
        gender_type1 = (client_genders[i] == 1)     # Male
        gender_type2 = (client_genders[i] == 2)     # Female
        gender_type3 = (client_genders[i] == 3)     # Other
        sum[0] = gender_type1.if_else(sum[0]+client_values[i], sum[0])        
        sum[1] = gender_type2.if_else(sum[1]+client_values[i], sum[1])        
        sum[2] = gender_type3.if_else(sum[2]+client_values[i], sum[2])        
        num_of_gender[0] = gender_type1.if_else(num_of_gender[0]+1, num_of_gender[0])
        num_of_gender[1] = gender_type2.if_else(num_of_gender[1]+1, num_of_gender[1])
        num_of_gender[2] = gender_type3.if_else(num_of_gender[2]+1, num_of_gender[2])
    
    average = sfix.Array(3)                         # The average salary provided by each gender.
    @for_range(3)
    def _(i):
        div = (num_of_gender[i] == 0)
        average[i] = div.if_else(0, sum[i]/num_of_gender[i])
    print_ln("1.(Male)  sum: %s, number: %s, average: %s", sum[0].reveal(), num_of_gender[0].reveal(), average[0].reveal())
    print_ln("2.(Female)sum: %s, number: %s, average: %s", sum[1].reveal(), num_of_gender[1].reveal(), average[1].reveal())
    print_ln("3.(Other) sum: %s, number: %s, average: %s", sum[2].reveal(), num_of_gender[2].reveal(), average[2].reveal())
    

def main():
    """
    Listen in while loop for players to join a game.
    Once maxiumum reached or have notified that round finished, run comparison and return result.
    """
    
    # Start listening for client socket connections
    listen_for_clients(PORTNUM)
    print_ln('Listening for client connections on base port %s', PORTNUM)

    def game_loop(_=None):
        print_ln('Starting a new round of the game.')
   
        # Number of clients
        number_clients = MemValue(regint(0))
        
        # Clients secret inputs-salary
        client_values = sfix.Array(MAX_NUM_CLIENTS)
        # Clients secret inputs-gender
        client_genders = sint.Array(MAX_NUM_CLIENTS)
            
        # Loop round waiting for each client to connect
        @while_do(lambda x: x < MAX_NUM_CLIENTS, regint(0))
        def client_connections(x):
            client_id = accept_client()
            @if_(client_id >= MAX_NUM_CLIENTS)
            def _():
                print_ln('client id too high')
                crash()
            
            # Check keep waiting clients input or not
            check = (client_id == 0)
            
            # record client input & number of clients
            client_values[x] = check.if_else(0, client_input(sfix, client_id))
            client_genders[x] = check.if_else(0, client_input(sint, client_id))
            now = check.if_else(number_clients, number_clients+1)
            number_clients.write(now)

            close_connections(client_id)
            
            return check.if_else(MAX_NUM_CLIENTS, x+1)
            
        average_gender_salary(number_clients, client_values, client_genders)

        return True

    if n_rounds > 0:
        print('run %d rounds' % n_rounds)
        for_range(n_rounds)(game_loop)
    else:
        print('run forever')
        do_while(game_loop)

main()
